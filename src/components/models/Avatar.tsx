/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/mymodel.glb -o src/components/Avatar.tsx -r public -t 
*/

import * as THREE from "three"
import React, { useEffect, useRef, useState, type JSX } from "react"
import { useGraph } from "@react-three/fiber"
import { useAnimations, useFBX, useGLTF } from "@react-three/drei"
import type { GLTF } from "three-stdlib"
import { SkeletonUtils } from "three-stdlib"

type GLTFResult = GLTF & {
	nodes: {
		Wolf3D_Hair: THREE.SkinnedMesh
		Wolf3D_Glasses: THREE.SkinnedMesh
		Wolf3D_Outfit_Top: THREE.SkinnedMesh
		Wolf3D_Outfit_Bottom: THREE.SkinnedMesh
		Wolf3D_Outfit_Footwear: THREE.SkinnedMesh
		Wolf3D_Body: THREE.SkinnedMesh
		EyeLeft: THREE.SkinnedMesh
		EyeRight: THREE.SkinnedMesh
		Wolf3D_Head: THREE.SkinnedMesh
		Wolf3D_Teeth: THREE.SkinnedMesh
		Hips: THREE.Bone
	}
	materials: {
		Wolf3D_Hair: THREE.MeshStandardMaterial
		Wolf3D_Glasses: THREE.MeshStandardMaterial
		Wolf3D_Outfit_Top: THREE.MeshStandardMaterial
		Wolf3D_Outfit_Bottom: THREE.MeshStandardMaterial
		Wolf3D_Outfit_Footwear: THREE.MeshStandardMaterial
		Wolf3D_Body: THREE.MeshStandardMaterial
		Wolf3D_Eye: THREE.MeshStandardMaterial
		Wolf3D_Skin: THREE.MeshStandardMaterial
		Wolf3D_Teeth: THREE.MeshStandardMaterial
	}
	// animations: GLTFAction[]
}

export default function Avatar(props: JSX.IntrinsicElements["group"]) {
	const { scene } = useGLTF("/models/mymodel.glb")
	const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
	const { nodes, materials } = useGraph(clone) as unknown as GLTFResult

	// Import our custom animations using useFBX hook
	const { animations: idleAnimation } = useFBX("/animations/Idle.fbx")
	const { animations: walkingAnimation } = useFBX("/animations/Walking.fbx")

	// create a refrence to apply animations to
	const group = useRef<THREE.Group>(null)
	// both the animations have same name mixamo.com so change names
	idleAnimation[0].name = "Idle"
	walkingAnimation[0].name = "Walking"

	// use useAnimations hook to apply animations
	const { actions } = useAnimations(
		[idleAnimation[0], walkingAnimation[0]],
		group
	)

	const [currentAnimation, setCurrentAnimation] = useState("Idle")
	useEffect(() => {
		if (!actions[currentAnimation]) return
		actions[currentAnimation].reset().fadeIn(0.5).play()
		return () => {
			if (actions[currentAnimation])
				actions[currentAnimation].fadeOut(0.5)
		}
	}, [currentAnimation])

	return (
		<group {...props} dispose={null} ref={group}>
			<primitive object={nodes.Hips} />
			<skinnedMesh
				geometry={nodes.Wolf3D_Hair.geometry}
				material={materials.Wolf3D_Hair}
				skeleton={nodes.Wolf3D_Hair.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Glasses.geometry}
				material={materials.Wolf3D_Glasses}
				skeleton={nodes.Wolf3D_Glasses.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Outfit_Top.geometry}
				material={materials.Wolf3D_Outfit_Top}
				skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
				material={materials.Wolf3D_Outfit_Bottom}
				skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
				material={materials.Wolf3D_Outfit_Footwear}
				skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Body.geometry}
				material={materials.Wolf3D_Body}
				skeleton={nodes.Wolf3D_Body.skeleton}
			/>
			<skinnedMesh
				name="EyeLeft"
				geometry={nodes.EyeLeft.geometry}
				material={materials.Wolf3D_Eye}
				skeleton={nodes.EyeLeft.skeleton}
				morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
				morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
			/>
			<skinnedMesh
				name="EyeRight"
				geometry={nodes.EyeRight.geometry}
				material={materials.Wolf3D_Eye}
				skeleton={nodes.EyeRight.skeleton}
				morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
				morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
			/>
			<skinnedMesh
				name="Wolf3D_Head"
				geometry={nodes.Wolf3D_Head.geometry}
				material={materials.Wolf3D_Skin}
				skeleton={nodes.Wolf3D_Head.skeleton}
				morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
				morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
			/>
			<skinnedMesh
				name="Wolf3D_Teeth"
				geometry={nodes.Wolf3D_Teeth.geometry}
				material={materials.Wolf3D_Teeth}
				skeleton={nodes.Wolf3D_Teeth.skeleton}
				morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
				morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
			/>
		</group>
	)
}
useGLTF.preload("/models/mymodel.glb")
useFBX.preload("/animations/Idle.fbx")
useFBX.preload("/animations/Walking.fbx")
