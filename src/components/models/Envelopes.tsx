/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/envelope.glb -o src/components/models/Envelopes.tsx -r public -t 
*/

import * as THREE from "three"
import { useCursor, useGLTF } from "@react-three/drei"
import { type GLTF } from "three-stdlib"
import { useEffect, useState, type JSX } from "react"
import { useFrame } from "@react-three/fiber"
import { data } from "../../utils/data"
import Tooltip from "../Tooltip"

type GLTFResult = GLTF & {
	nodes: {
		["Node-Mesh"]: THREE.Mesh
		["Node-Mesh_1"]: THREE.Mesh
	}
	materials: {
		mat18: THREE.MeshStandardMaterial
		mat19: THREE.MeshStandardMaterial
	}
}

export default function Envelopes(props: JSX.IntrinsicElements["group"]) {
	const { nodes, materials } = useGLTF(
		"/models/envelope.glb"
	) as unknown as GLTFResult

	const [mailboxHovered, setMailboxHovered] = useState(false)
	useCursor(mailboxHovered)

	useEffect(() => {
		const emissiveColor = new THREE.Color("#ffffff")
		Object.values(materials).forEach((material) => {
			material.emissive = emissiveColor
		})
	}, [])

	useFrame(() => {
		Object.values(materials).forEach((material) => {
			material.emissiveIntensity = THREE.MathUtils.lerp(
				material.emissiveIntensity,
				mailboxHovered ? 0.32 : 0,
				0.1
			)
		})
	})

	return (
		<group
			{...props}
			dispose={null}
			onPointerEnter={() => setMailboxHovered(true)}
			onPointerLeave={() => setMailboxHovered(false)}
			onClick={() => window.open(`mailto:${data.contact.mail}`)}
		>
			{mailboxHovered && <Tooltip position-x={2.5}>{data.contact.tooltip}</Tooltip>}
			<mesh
				geometry={nodes["Node-Mesh"].geometry}
				material={materials.mat18}
				receiveShadow
			/>
			<mesh
				geometry={nodes["Node-Mesh_1"].geometry}
				material={materials.mat19}
				receiveShadow
			/>
		</group>
	)
}

useGLTF.preload("/models/envelope.glb")
